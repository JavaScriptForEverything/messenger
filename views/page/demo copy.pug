extends ../layout
block script
	//- script( async type="module" src="https://cdn.jsdelivr.net/npm/emoji-picker-element@^1/index.js")
	//- script( defer type='module' src='/js/page/demo.js')
	style.
		@keyframes blink {
			0% {
				color: red;
				opacity: 100;
			}
			30% {
				opacity: 0;
			}
		}
		.active {
			color: red;
			animation-name: blink; 
			animation-duration: 800ms;
			animation-iteration-count: infinite;
		}

block body 

	input(class='border border-red-500' readonly=false)



	div(class='border border-red-500')
		audio(name='audio')
	div
		button(name='record' class='border border-slate-300 px-3 py-1') Recorde
		button(name='stop' class='border border-slate-300 px-3 py-1') Stop
		button(name='download' class='border border-slate-300 px-3 py-1') Download

	//- div(
	//- 	class='[&>*:last-child]:[&.active]:block [&>*:first-child]:[&.active]:hidden'
	//- 	class='[&>*:first-child]:block [&>*:last-child]:hidden'
	//- 	class='active'
	//- 	)
	//- 	<svg class='text-slate-500  w-6 h-6 pointer-events-none' xmlns="http://www.w3.org/2000/svg" width="256" height="256" viewBox="0 0 256 256"><path fill="currentColor" d="M128 176a48.05 48.05 0 0 0 48-48V64a48 48 0 0 0-96 0v64a48.05 48.05 0 0 0 48 48M96 64a32 32 0 0 1 64 0v64a32 32 0 0 1-64 0Zm40 143.6V232a8 8 0 0 1-16 0v-24.4A80.11 80.11 0 0 1 48 128a8 8 0 0 1 16 0a64 64 0 0 0 128 0a8 8 0 0 1 16 0a80.11 80.11 0 0 1-72 79.6"/></svg>
	//- 	<svg class='w-6 h-6 pointer-events-none' xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 256 256"><path fill="currentColor" d="M80 128V64a48 48 0 0 1 96 0v64a48 48 0 0 1-96 0m128 0a8 8 0 0 0-16 0a64 64 0 0 1-128 0a8 8 0 0 0-16 0a80.11 80.11 0 0 0 72 79.6V240a8 8 0 0 0 16 0v-32.4a80.11 80.11 0 0 0 72-79.6"/></svg>

	script.
		const $ = (selector) => document.querySelector(selector)
		const audio = $('[name=audio]')
		const recordButton = $('[name=record]')
		const stopButton = $('[name=stop]')
		const downloadButton = $('[name=download]')

		let timer = 0


		let stream = new MediaStream()
		let recorder = new MediaRecorder(stream)
		let audioExt = MediaRecorder.isTypeSupported('audio/ogg;codecs=opus') ? 'ogg' : 'webm'
		let chunks = []


		const startRecording = async () => {
			console.log('recording started')

			stream = await navigator.mediaDevices.getUserMedia({ audio: true })
			recorder = new MediaRecorder(stream, { mimetype: `audio/${audioExt};codecs=opus` })

			recorder.start() // start record with 1sec chunk

			// To show audio time counter immediately
			audio.srcObject = stream 	// removed srcObject property when add src = dataUrl after finished
			audio.controls = true
			audio.autoplay = true

			clearInterval( timer )
			timer = setInterval(() => {
				console.log(audio.currentTime, audio.duration)
			}, [1000])

			//- recorder.addEventListener('loadedmetadata', (evt) => {
			//- 	console.log('audioCurrentTime', audio.currentTime)
			//- 	console.log('duration', audio.duration)
			//- })

			recorder.addEventListener('dataavailable', (evt) => {
				chunks.push( evt.data )

				if( recorder.state === 'inactive' ) {
					const blob = new Blob(chunks, { type: `audio/${audioExt}`, bitsPerSecond: 128000 })
					chunks = []
					showAudio(blob)
				}
			})
		}

		const showAudio = (blob) => {
			audio.srcObject = null 	// remove old audio.srcObject added in record starting time

			const dataUrl = URL.createObjectURL(blob)
			audio.src = dataUrl
			audio.controls = true
			audio.autoplay = false
			//- URL.revokeObjectURL(dataUrl) 	// Don't remove url, else audio will be no more
		}


		const downloadAudioRecording = () => {
			if( !audio.src ) return console.log('recorde video first')

			const a = document.createElement('a')
			a.href = audio.src
			a.download = Date.now() + '.' + audioExt
			a.click()
			a.style = "display: none;"
			document.body.appendChild(a)
		}

		const stopRecording = () => {
			if(recorder?.state === 'recording' || recorder?.state === 'paused') {
				console.log('recording stopped')

				recorder.stop() 	// stop MediaRecorder
				stream.getAudioTracks()[0].stop() 	// Stop microphone: Stop device entirely
			}
			/* stream.getAudioTracks()[0].stop() close media completely, so to re-start, need to fetch 
					navigator.mediaDevice.getUserMedia(...) again

					so we have 2 solution:
						1. instead of stop just mute/unmete any track: track.enabled = false/true
						2. create ...getUserMedia(...) into seperate startFunction, so that can call again
			*/
			//- recordButton.removeEventListener('click', startRecording)
		}

		recordButton.addEventListener('click', startRecording)

		stopButton.addEventListener('click', stopRecording)
		downloadButton.addEventListener('click', downloadAudioRecording)


	
